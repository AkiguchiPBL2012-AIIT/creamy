=============================================
MVCアプリケーションモデル
=============================================

CreamyアプリケーションはWebに適用されたMVCアーキテクチャパターンに従います。

このパターンはアプリケーションを別々の層: Presentation 層 と Model 層 に分割します。Presentation 層 はさらに View 層 と Controller 層 に分けられます。

Model
============================================
Modelはアプリケーションが扱う情報をドメインに特化して表現したものです。

また、ほどんどのアプリケーションが、データを保存するためにデータベースなどの永続的なストレージを使用します。Modelでは、このデータベースなどへのデータアクセス層を隠蔽/カプセル化します。

CreamyでのModelの扱いはWebアプリケーションフレームワークのそれと変わりはありません。
ほとんどのアプリケーションでは、ドメインに特化したビジネスロジックの記述とデータベースへのマッピング(データ
アクセス層の隠蔽/カプセル化)に使用します。

View
============================================
Viewの通常の役割は、ユーザインタフェースにあたるモデルをレンダリングすることです。

典型的にはWebアプリケーションでは、HTMLがレンダリングされますが、CreamyではFXMLがこれにあたります。

Contorller
============================================
Controller は、イベント(通常はユーザのアクション)に反応してそれらを処理します。

場合によっては、下層のModelに変更を適用し、レスポンスを返却します。

Webアプリケーションでは、通常、イベントはHTTPリクエストです。

Creamyでは、Requestクラスとそのインスタンスがあたります。CreamyのBrowser上で特定のコントロール(Hyperlink、Submitボタンなど)で
アクションがあると、イベントとして(Requestインスタンスが生成され)、Contorollerに通知されます。

Webアプリケーションとの比較
============================================
ここで、WebアプリケーションとCreamyを比較して整理しておきましょう。

* Webアプリケーション

.. image:: mvc-web-figure.png

* Creamyアプリケーション

.. image:: mvc-creamy-figure.png

見て分かる通り、MVCの役割はWebアプリケーションとCreamyで変わりはありません。

違いはHTTPリクエスト/HTTPレスポンスが、CreamyではJavaオブジェクトとなっていることだけです。


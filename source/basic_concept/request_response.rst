=============================================
ステートレスなリクエスト/レスポンス
=============================================

処理フロー
=============================================
CreamyフレームワークはWebアプリケーションと同じく、完全にステートレスであり、
リクエスト/レスポンスのみを重視します。
すべてのリクエストは同じ処理フローを通ります。では実際に処理フローを見てみましょう。

#. Browserはリクエストを生成してRouterコンポーネントに送信します。
#. Routerコンポーネントはリクエストを受信し、リクエストに適合するルートを探します。そして、対応するアクションメソッドが起動されます。
#. アプリケーションコードが実行されます。
#. ビューを生成するために、テンプレートファイルレンダリングされます。そしてFXMLが評価されJavaFXオブジェクトが生成されます。
#. アクションメソッドの結果がレスポンスとしてBrowserに返却されます。

処理フローを以下にまとめます。

.. image:: creamy-flow-figure.png

Webアプリケーションフレームワークとの違い
=============================================
Creamyの処理フローはステートレスであり、一般的なWebフレームワークの処理フローと変わるものでありません。

たたし以下の点が異なります。

**CreamyとWebフレームワークの違い**

+---------------------------+--------------------------------+----------------------------------------+
|                           | リクエスト/レスポンス          | リクエストボディ                       |
+===========================+================================+========================================+
| Creamy                    | Javaオブジェクト               | FXMLをJavaFXランタイムでロードしたもの |
|                           |                                |                                        |
|                           | (Requestクラス/Responseクラス) | (Javaオブジェクト)                     |
+---------------------------+--------------------------------+----------------------------------------+
| 一般的なWebフレームワーク | HTTPリクエスト/HTTPレスポンス  | HTML/XML                               |
|                           |                                |                                        |
|                           |                                | (テキスト)                             |
+---------------------------+--------------------------------+----------------------------------------+

CreamyはひとつのJavaVM上で動作します。Webのようにネットワークを介する訳ではありません。

Requestクラス/ResponseクラスはHTTPリクエスト/HTTPレスポンスにあたるJavaオブジェクトです。

また、レスポンスボディには、JavaFX Scene Graphオブジェクト(UIに表示されるオブジェクトの実体)と
Activityオブジェクトが含まれます。(Webではテキストベースですが、CreamyではJavaオブジェクトということです。)

より具体的には以下となります。(上図の「Views」部分)

#. Render : テンプレートをFXMLにレンダーする
#. Load   : FXMLをJavaFXランタイム(FXMLLoader)でロードする (Scene Graphオブジェクトを生成する)

2.では、さらに、Scene Graphオブジェクトのハンドラーの役割を果たすオブジェクトを生成します。
Creamyでは、このオブジェクトをActivityと呼んでいます。

.. note::

  Acitivityについては :doc:`architecture/view_activity` で詳しく説明します。

では、最後に、まとめとしてCreamyとWebフレームワークを処理フローで比較します。

**処理フローの比較**

.. image:: compare-flow-figure.png

Creamy(左側の図)で赤い破線で示す箇所が、Webフレームワークと異なるところです。

ところでCreamyのBrowserとは何でしょうか？では、次にBrowserについて見ていきましょう。

